<beans
  xmlns="http://www.springframework.org/schema/beans"
  xmlns:amq="http://activemq.apache.org/schema/core"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
  http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd
  http://activemq.apache.org/camel/schema/spring http://activemq.apache.org/camel/schema/spring/camel-spring.xsd">

  <!-- Managed by Puppet from cfgmgmt1.ams1.domainname.net, module activemq -->

    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <value>file:${activemq.base}/conf/credentials.properties</value>
        </property>
    </bean>

    <broker xmlns="http://activemq.apache.org/schema/core" brokerName="mco-broker1.ams1.domainname.net" useJmx="true" schedulePeriodForDestinationPurge="60000">
        <destinationPolicy>
          <policyMap>
            <policyEntries>
              <policyEntry topic=">" producerFlowControl="false"/>


              <policyEntry queue=">" gcInactiveDestinations="true" inactiveTimoutBeforeGC="300000" producerFlowControl="false" queuePrefetch="1">
              <!-- 
              Tell the dead letter strategy not to process expired messages
              so that they will just be discarded instead of being sent to
              the DLQ 
              -->
                <deadLetterStrategy>
                  <sharedDeadLetterStrategy processExpired="false" />
                </deadLetterStrategy>
                <pendingQueuePolicy>
                  <vmQueueCursor />
                </pendingQueuePolicy>
              </policyEntry>
            </policyEntries>
          </policyMap>
        </destinationPolicy>

        <managementContext>
            <managementContext createConnector="false"/>
        </managementContext>

  
  
        <networkConnectors>
          <networkConnector
                name="mco-broker1.ams1.domainname.net-mco-broker4.ams1.domainname.net-topics"
                uri="static:(ssl://mco-broker4.ams1.domainname.net:6167)"
                userName="XXXX"
                password="XXXX"
                duplex="true"
                decreaseNetworkConsumerPriority="true"
                networkTTL="2"
                dynamicOnly="true">
                <excludedDestinations>
                        <queue physicalName=">" />
                </excludedDestinations>
          </networkConnector>
          <networkConnector
                name="mco-broker1.ams1.domainname.net-mco-broker4.ams1.domainname.net-queues"
                uri="static:(ssl://mco-broker4.ams1.domainname.net:6167)"
                userName="XXXX"
                password="XXXX"
                duplex="true"
                decreaseNetworkConsumerPriority="true"
                networkTTL="2"
                dynamicOnly="true"
                conduitSubscriptions="false">
                <excludedDestinations>
                        <topic physicalName=">" />
                </excludedDestinations>
          </networkConnector>
        </networkConnectors>
        <persistenceAdapter>
          <kahaDB directory="/var/cache/activemq/data" journalMaxFileLength="64mb"/>
        </persistenceAdapter>

        <plugins>
          <statisticsBrokerPlugin/>
          <simpleAuthenticationPlugin>
            <users>
            </users>
          </simpleAuthenticationPlugin>
          <authorizationPlugin>
            <map>
              <authorizationMap>
                <authorizationEntries>
                  <authorizationEntry queue=">" write="admins" read="admins" admin="admins" />
                  <authorizationEntry queue="global.reply.>" write="allcollectives" admin="allcollectives" />
                  <authorizationEntry queue="eu.reply.>" write="eu" admin="eu" />
                  <authorizationEntry queue="eu_infra.reply.>" write="eu_infra" admin="eu_infra" />
                  <authorizationEntry queue="eu_services.reply.>" write="eu_services" admin="eu_services" />
                  <authorizationEntry queue="eu_customer.reply.>" write="eu_customer" admin="eu_customer" />
                  <authorizationEntry queue="global.nodes" read="allcollectives" admin="allcollectives" />
                  <authorizationEntry queue="eu.nodes" read="eu" admin="eu" />
                  <authorizationEntry queue="eu_infra.nodes" read="eu_infra" admin="eu_infra" />
                  <authorizationEntry queue="eu_services.nodes" read="eu_services" admin="eu_services" />
                  <authorizationEntry queue="eu_customer.nodes" read="eu_customer" admin="eu_customer" />
                  <authorizationEntry topic=">" write="admins" read="admins" admin="admins" />
                  <authorizationEntry topic="global.registration.agent" write="allcollectives" read="allcollectives" admin="allcollectives" />
                  <authorizationEntry topic="global.*.agent" read="allcollectives" admin="allcollectives" />
                  <authorizationEntry topic="eu.registration.agent" write="eu" read="eu" admin="eu" />
                  <authorizationEntry topic="eu.*.agent" read="eu" admin="eu" />
                  <authorizationEntry topic="eu_infra.*.agent" read="eu_infra" admin="eu_infra" />
                  <authorizationEntry topic="eu_services.*.agent" read="eu_services" admin="eu_services" />
                  <authorizationEntry topic="eu_customer.*.agent" read="eu_customer" admin="eu_customer" />
                  <authorizationEntry topic="ActiveMQ.Advisory.>" write="everyone" read="everyone" admin="everyone" />
                </authorizationEntries>
              </authorizationMap>
            </map>
          </authorizationPlugin>
        </plugins>

        <sslContext>
          <sslContext
            keyStore="ssl/keystore.jks" keyStorePassword="XXXX"
            trustStore="ssl/truststore.jks" trustStorePassword="XXXX"
          />
        </sslContext>

        <systemUsage>
            <systemUsage sendFailIfNoSpace="true">
                <memoryUsage>
                    <memoryUsage limit="2 gb"/>
                </memoryUsage>
                <storeUsage>
                    <storeUsage limit="10 gb" name="foo"/>
                </storeUsage>
                <tempUsage>
                    <tempUsage limit="1 gb"/>
                </tempUsage>
            </systemUsage>
        </systemUsage>

        <transportConnectors>
            <transportConnector name="openwiressl" uri="ssl://0.0.0.0:6167"/>
            <transportConnector name="stompssl" uri="stomp+ssl://0.0.0.0:6164?jms.prefetchPolicy.queuePrefetch=1"/>
        </transportConnectors>

    </broker>
    <import resource="jetty.xml"/>
</beans>
